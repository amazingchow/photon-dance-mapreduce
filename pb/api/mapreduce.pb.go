// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0-devel
// 	protoc        v3.15.2
// source: mapreduce.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type WorkerStatus int32

const (
	WorkerStatus_WORKER_STATUS_ONLINE      WorkerStatus = 0
	WorkerStatus_WORKER_STATUS_OFFLINE     WorkerStatus = 1
	WorkerStatus_WORKER_STATUS_READY       WorkerStatus = 2
	WorkerStatus_WORKER_STATUS_BUSY        WorkerStatus = 3
	WorkerStatus_WORKER_STATUS_UNAVAILABLE WorkerStatus = 4
)

// Enum value maps for WorkerStatus.
var (
	WorkerStatus_name = map[int32]string{
		0: "WORKER_STATUS_ONLINE",
		1: "WORKER_STATUS_OFFLINE",
		2: "WORKER_STATUS_READY",
		3: "WORKER_STATUS_BUSY",
		4: "WORKER_STATUS_UNAVAILABLE",
	}
	WorkerStatus_value = map[string]int32{
		"WORKER_STATUS_ONLINE":      0,
		"WORKER_STATUS_OFFLINE":     1,
		"WORKER_STATUS_READY":       2,
		"WORKER_STATUS_BUSY":        3,
		"WORKER_STATUS_UNAVAILABLE": 4,
	}
)

func (x WorkerStatus) Enum() *WorkerStatus {
	p := new(WorkerStatus)
	*p = x
	return p
}

func (x WorkerStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkerStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[0].Descriptor()
}

func (WorkerStatus) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[0]
}

func (x WorkerStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkerStatus.Descriptor instead.
func (WorkerStatus) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

type TaskType int32

const (
	TaskType_TASK_TYPE_MAP    TaskType = 0
	TaskType_TASK_TYPE_REDUCE TaskType = 1
)

// Enum value maps for TaskType.
var (
	TaskType_name = map[int32]string{
		0: "TASK_TYPE_MAP",
		1: "TASK_TYPE_REDUCE",
	}
	TaskType_value = map[string]int32{
		"TASK_TYPE_MAP":    0,
		"TASK_TYPE_REDUCE": 1,
	}
)

func (x TaskType) Enum() *TaskType {
	p := new(TaskType)
	*p = x
	return p
}

func (x TaskType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskType) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[1].Descriptor()
}

func (TaskType) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[1]
}

func (x TaskType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskType.Descriptor instead.
func (TaskType) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{1}
}

type TaskStatus int32

const (
	TaskStatus_TASK_STATUS_UNATTACHED TaskStatus = 0
	TaskStatus_TASK_STATUS_ATTACHED   TaskStatus = 1
	TaskStatus_TASK_STATUS_ONDOING    TaskStatus = 2
	TaskStatus_TASK_STATUS_DONE       TaskStatus = 3
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "TASK_STATUS_UNATTACHED",
		1: "TASK_STATUS_ATTACHED",
		2: "TASK_STATUS_ONDOING",
		3: "TASK_STATUS_DONE",
	}
	TaskStatus_value = map[string]int32{
		"TASK_STATUS_UNATTACHED": 0,
		"TASK_STATUS_ATTACHED":   1,
		"TASK_STATUS_ONDOING":    2,
		"TASK_STATUS_DONE":       3,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[2].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[2]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{2}
}

type IntercomType int32

const (
	IntercomType_INTERCOM_TYPE_ASK_TASK           IntercomType = 0
	IntercomType_INTERCOM_TYPE_FINISH_MAP_TASK    IntercomType = 1
	IntercomType_INTERCOM_TYPE_FINISH_REDUCE_TASK IntercomType = 2
	IntercomType_INTERCOM_TYPE_SEND_INTER_FILE    IntercomType = 3
)

// Enum value maps for IntercomType.
var (
	IntercomType_name = map[int32]string{
		0: "INTERCOM_TYPE_ASK_TASK",
		1: "INTERCOM_TYPE_FINISH_MAP_TASK",
		2: "INTERCOM_TYPE_FINISH_REDUCE_TASK",
		3: "INTERCOM_TYPE_SEND_INTER_FILE",
	}
	IntercomType_value = map[string]int32{
		"INTERCOM_TYPE_ASK_TASK":           0,
		"INTERCOM_TYPE_FINISH_MAP_TASK":    1,
		"INTERCOM_TYPE_FINISH_REDUCE_TASK": 2,
		"INTERCOM_TYPE_SEND_INTER_FILE":    3,
	}
)

func (x IntercomType) Enum() *IntercomType {
	p := new(IntercomType)
	*p = x
	return p
}

func (x IntercomType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IntercomType) Descriptor() protoreflect.EnumDescriptor {
	return file_mapreduce_proto_enumTypes[3].Descriptor()
}

func (IntercomType) Type() protoreflect.EnumType {
	return &file_mapreduce_proto_enumTypes[3]
}

func (x IntercomType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IntercomType.Descriptor instead.
func (IntercomType) EnumDescriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{3}
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs []string `protobuf:"bytes,1,rep,name=inputs,proto3" json:"inputs,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{0}
}

func (x *Task) GetInputs() []string {
	if x != nil {
		return x.Inputs
	}
	return nil
}

type Worker struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Status WorkerStatus `protobuf:"varint,2,opt,name=status,proto3,enum=github_com.amazingchow.photon_dance_mapreduce.WorkerStatus" json:"status,omitempty"`
}

func (x *Worker) Reset() {
	*x = Worker{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Worker) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Worker) ProtoMessage() {}

func (x *Worker) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Worker.ProtoReflect.Descriptor instead.
func (*Worker) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{1}
}

func (x *Worker) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Worker) GetStatus() WorkerStatus {
	if x != nil {
		return x.Status
	}
	return WorkerStatus_WORKER_STATUS_ONLINE
}

// ---------- request + response ----------
type AddTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=task,proto3" json:"task,omitempty"`
}

func (x *AddTaskRequest) Reset() {
	*x = AddTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskRequest) ProtoMessage() {}

func (x *AddTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskRequest.ProtoReflect.Descriptor instead.
func (*AddTaskRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{2}
}

func (x *AddTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type AddTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddTaskResponse) Reset() {
	*x = AddTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTaskResponse) ProtoMessage() {}

func (x *AddTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTaskResponse.ProtoReflect.Descriptor instead.
func (*AddTaskResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{3}
}

type ListWorkersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListWorkersRequest) Reset() {
	*x = ListWorkersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersRequest) ProtoMessage() {}

func (x *ListWorkersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersRequest.ProtoReflect.Descriptor instead.
func (*ListWorkersRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{4}
}

type ListWorkersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workers []*Worker `protobuf:"bytes,1,rep,name=workers,proto3" json:"workers,omitempty"`
}

func (x *ListWorkersResponse) Reset() {
	*x = ListWorkersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWorkersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWorkersResponse) ProtoMessage() {}

func (x *ListWorkersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWorkersResponse.ProtoReflect.Descriptor instead.
func (*ListWorkersResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{5}
}

func (x *ListWorkersResponse) GetWorkers() []*Worker {
	if x != nil {
		return x.Workers
	}
	return nil
}

type IntercomRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgType    IntercomType `protobuf:"varint,1,opt,name=MsgType,proto3,enum=github_com.amazingchow.photon_dance_mapreduce.IntercomType" json:"MsgType,omitempty"`
	MsgContent string       `protobuf:"bytes,2,opt,name=MsgContent,proto3" json:"MsgContent,omitempty"`
	Extra      string       `protobuf:"bytes,3,opt,name=Extra,proto3" json:"Extra,omitempty"`
}

func (x *IntercomRequest) Reset() {
	*x = IntercomRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntercomRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntercomRequest) ProtoMessage() {}

func (x *IntercomRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntercomRequest.ProtoReflect.Descriptor instead.
func (*IntercomRequest) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{6}
}

func (x *IntercomRequest) GetMsgType() IntercomType {
	if x != nil {
		return x.MsgType
	}
	return IntercomType_INTERCOM_TYPE_ASK_TASK
}

func (x *IntercomRequest) GetMsgContent() string {
	if x != nil {
		return x.MsgContent
	}
	return ""
}

func (x *IntercomRequest) GetExtra() string {
	if x != nil {
		return x.Extra
	}
	return ""
}

type IntercomResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskType           TaskType `protobuf:"varint,1,opt,name=TaskType,proto3,enum=github_com.amazingchow.photon_dance_mapreduce.TaskType" json:"TaskType,omitempty"`
	File               string   `protobuf:"bytes,2,opt,name=File,proto3" json:"File,omitempty"`
	NReduce            int32    `protobuf:"varint,3,opt,name=NReduce,proto3" json:"NReduce,omitempty"`
	MapTaskAttached    int32    `protobuf:"varint,4,opt,name=MapTaskAttached,proto3" json:"MapTaskAttached,omitempty"`
	ReduceTaskAttached int32    `protobuf:"varint,5,opt,name=ReduceTaskAttached,proto3" json:"ReduceTaskAttached,omitempty"`
	ReduceFiles        []string `protobuf:"bytes,6,rep,name=ReduceFiles,proto3" json:"ReduceFiles,omitempty"`
}

func (x *IntercomResponse) Reset() {
	*x = IntercomResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mapreduce_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntercomResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntercomResponse) ProtoMessage() {}

func (x *IntercomResponse) ProtoReflect() protoreflect.Message {
	mi := &file_mapreduce_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntercomResponse.ProtoReflect.Descriptor instead.
func (*IntercomResponse) Descriptor() ([]byte, []int) {
	return file_mapreduce_proto_rawDescGZIP(), []int{7}
}

func (x *IntercomResponse) GetTaskType() TaskType {
	if x != nil {
		return x.TaskType
	}
	return TaskType_TASK_TYPE_MAP
}

func (x *IntercomResponse) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

func (x *IntercomResponse) GetNReduce() int32 {
	if x != nil {
		return x.NReduce
	}
	return 0
}

func (x *IntercomResponse) GetMapTaskAttached() int32 {
	if x != nil {
		return x.MapTaskAttached
	}
	return 0
}

func (x *IntercomResponse) GetReduceTaskAttached() int32 {
	if x != nil {
		return x.ReduceTaskAttached
	}
	return 0
}

func (x *IntercomResponse) GetReduceFiles() []string {
	if x != nil {
		return x.ReduceFiles
	}
	return nil
}

var File_mapreduce_proto protoreflect.FileDescriptor

var file_mapreduce_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d,
	0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x22, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x22, 0x6d, 0x0a, 0x06, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x59, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x47, 0x0a, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61,
	0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x73, 0x6b, 0x22, 0x11, 0x0a, 0x0f, 0x41, 0x64,
	0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x14, 0x0a,
	0x12, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x66, 0x0a, 0x13, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65,
	0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x07, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x35, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67,
	0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x65, 0x72, 0x52, 0x07, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x22, 0x9e, 0x01, 0x0a, 0x0f,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x07, 0x4d, 0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x3b, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d,
	0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e,
	0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
	0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x4d,
	0x73, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x73, 0x67, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4d, 0x73, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x22, 0x91, 0x02, 0x0a,
	0x10, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x53, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x37, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d,
	0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f,
	0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64,
	0x75, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x54, 0x61,
	0x73, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4e, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x41,
	0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x4d,
	0x61, 0x70, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x2e,
	0x0a, 0x12, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x61,
	0x63, 0x68, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x52, 0x65, 0x64, 0x75, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x65, 0x73,
	0x2a, 0x93, 0x01, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54,
	0x55, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x49, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f, 0x46, 0x46,
	0x4c, 0x49, 0x4e, 0x45, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x02, 0x12,
	0x16, 0x0a, 0x12, 0x57, 0x4f, 0x52, 0x4b, 0x45, 0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
	0x5f, 0x42, 0x55, 0x53, 0x59, 0x10, 0x03, 0x12, 0x1d, 0x0a, 0x19, 0x57, 0x4f, 0x52, 0x4b, 0x45,
	0x52, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x33, 0x0a, 0x08, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x4d, 0x41, 0x50, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x01, 0x2a, 0x71, 0x0a, 0x0a, 0x54,
	0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x41, 0x53,
	0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x48, 0x45, 0x44, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54,
	0x41, 0x54, 0x55, 0x53, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x48, 0x45, 0x44, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x54, 0x41, 0x53, 0x4b, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x4f,
	0x4e, 0x44, 0x4f, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x54, 0x41, 0x53, 0x4b,
	0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x2a, 0x96,
	0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x41, 0x53, 0x4b, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x49, 0x4e,
	0x49, 0x53, 0x48, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x41, 0x53, 0x4b, 0x10, 0x01, 0x12, 0x24,
	0x0a, 0x20, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x46, 0x49, 0x4e, 0x49, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x5f, 0x54, 0x41,
	0x53, 0x4b, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x4f, 0x4d,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x03, 0x32, 0xcb, 0x03, 0x0a, 0x13, 0x4d, 0x61, 0x70, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x65, 0x52, 0x50, 0x43, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x8a, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x3d, 0x2e, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67,
	0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3e, 0x2e, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63,
	0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65,
	0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x96, 0x01, 0x0a,
	0x0b, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x12, 0x41, 0x2e, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e,
	0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e,
	0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x42, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x6d, 0x61,
	0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x6e, 0x5f,
	0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x8d, 0x01, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63,
	0x6f, 0x6d, 0x12, 0x3e, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x3f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x63, 0x6f, 0x6d, 0x2e,
	0x61, 0x6d, 0x61, 0x7a, 0x69, 0x6e, 0x67, 0x63, 0x68, 0x6f, 0x77, 0x2e, 0x70, 0x68, 0x6f, 0x74,
	0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x65, 0x64, 0x75,
	0x63, 0x65, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x63, 0x6f, 0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x06, 0x5a, 0x04, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_mapreduce_proto_rawDescOnce sync.Once
	file_mapreduce_proto_rawDescData = file_mapreduce_proto_rawDesc
)

func file_mapreduce_proto_rawDescGZIP() []byte {
	file_mapreduce_proto_rawDescOnce.Do(func() {
		file_mapreduce_proto_rawDescData = protoimpl.X.CompressGZIP(file_mapreduce_proto_rawDescData)
	})
	return file_mapreduce_proto_rawDescData
}

var file_mapreduce_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_mapreduce_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_mapreduce_proto_goTypes = []interface{}{
	(WorkerStatus)(0),           // 0: github_com.amazingchow.photon_dance_mapreduce.WorkerStatus
	(TaskType)(0),               // 1: github_com.amazingchow.photon_dance_mapreduce.TaskType
	(TaskStatus)(0),             // 2: github_com.amazingchow.photon_dance_mapreduce.TaskStatus
	(IntercomType)(0),           // 3: github_com.amazingchow.photon_dance_mapreduce.IntercomType
	(*Task)(nil),                // 4: github_com.amazingchow.photon_dance_mapreduce.Task
	(*Worker)(nil),              // 5: github_com.amazingchow.photon_dance_mapreduce.Worker
	(*AddTaskRequest)(nil),      // 6: github_com.amazingchow.photon_dance_mapreduce.AddTaskRequest
	(*AddTaskResponse)(nil),     // 7: github_com.amazingchow.photon_dance_mapreduce.AddTaskResponse
	(*ListWorkersRequest)(nil),  // 8: github_com.amazingchow.photon_dance_mapreduce.ListWorkersRequest
	(*ListWorkersResponse)(nil), // 9: github_com.amazingchow.photon_dance_mapreduce.ListWorkersResponse
	(*IntercomRequest)(nil),     // 10: github_com.amazingchow.photon_dance_mapreduce.IntercomRequest
	(*IntercomResponse)(nil),    // 11: github_com.amazingchow.photon_dance_mapreduce.IntercomResponse
}
var file_mapreduce_proto_depIdxs = []int32{
	0,  // 0: github_com.amazingchow.photon_dance_mapreduce.Worker.status:type_name -> github_com.amazingchow.photon_dance_mapreduce.WorkerStatus
	4,  // 1: github_com.amazingchow.photon_dance_mapreduce.AddTaskRequest.task:type_name -> github_com.amazingchow.photon_dance_mapreduce.Task
	5,  // 2: github_com.amazingchow.photon_dance_mapreduce.ListWorkersResponse.workers:type_name -> github_com.amazingchow.photon_dance_mapreduce.Worker
	3,  // 3: github_com.amazingchow.photon_dance_mapreduce.IntercomRequest.MsgType:type_name -> github_com.amazingchow.photon_dance_mapreduce.IntercomType
	1,  // 4: github_com.amazingchow.photon_dance_mapreduce.IntercomResponse.TaskType:type_name -> github_com.amazingchow.photon_dance_mapreduce.TaskType
	6,  // 5: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.AddTask:input_type -> github_com.amazingchow.photon_dance_mapreduce.AddTaskRequest
	8,  // 6: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.ListWorkers:input_type -> github_com.amazingchow.photon_dance_mapreduce.ListWorkersRequest
	10, // 7: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.Intercom:input_type -> github_com.amazingchow.photon_dance_mapreduce.IntercomRequest
	7,  // 8: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.AddTask:output_type -> github_com.amazingchow.photon_dance_mapreduce.AddTaskResponse
	9,  // 9: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.ListWorkers:output_type -> github_com.amazingchow.photon_dance_mapreduce.ListWorkersResponse
	11, // 10: github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService.Intercom:output_type -> github_com.amazingchow.photon_dance_mapreduce.IntercomResponse
	8,  // [8:11] is the sub-list for method output_type
	5,  // [5:8] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_mapreduce_proto_init() }
func file_mapreduce_proto_init() {
	if File_mapreduce_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mapreduce_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Worker); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWorkersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntercomRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mapreduce_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntercomResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mapreduce_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mapreduce_proto_goTypes,
		DependencyIndexes: file_mapreduce_proto_depIdxs,
		EnumInfos:         file_mapreduce_proto_enumTypes,
		MessageInfos:      file_mapreduce_proto_msgTypes,
	}.Build()
	File_mapreduce_proto = out.File
	file_mapreduce_proto_rawDesc = nil
	file_mapreduce_proto_goTypes = nil
	file_mapreduce_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MapReduceRPCServiceClient is the client API for MapReduceRPCService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MapReduceRPCServiceClient interface {
	AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error)
	ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error)
	Intercom(ctx context.Context, in *IntercomRequest, opts ...grpc.CallOption) (*IntercomResponse, error)
}

type mapReduceRPCServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMapReduceRPCServiceClient(cc grpc.ClientConnInterface) MapReduceRPCServiceClient {
	return &mapReduceRPCServiceClient{cc}
}

func (c *mapReduceRPCServiceClient) AddTask(ctx context.Context, in *AddTaskRequest, opts ...grpc.CallOption) (*AddTaskResponse, error) {
	out := new(AddTaskResponse)
	err := c.cc.Invoke(ctx, "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/AddTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceRPCServiceClient) ListWorkers(ctx context.Context, in *ListWorkersRequest, opts ...grpc.CallOption) (*ListWorkersResponse, error) {
	out := new(ListWorkersResponse)
	err := c.cc.Invoke(ctx, "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/ListWorkers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapReduceRPCServiceClient) Intercom(ctx context.Context, in *IntercomRequest, opts ...grpc.CallOption) (*IntercomResponse, error) {
	out := new(IntercomResponse)
	err := c.cc.Invoke(ctx, "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/Intercom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapReduceRPCServiceServer is the server API for MapReduceRPCService service.
type MapReduceRPCServiceServer interface {
	AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error)
	ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error)
	Intercom(context.Context, *IntercomRequest) (*IntercomResponse, error)
}

// UnimplementedMapReduceRPCServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMapReduceRPCServiceServer struct {
}

func (*UnimplementedMapReduceRPCServiceServer) AddTask(context.Context, *AddTaskRequest) (*AddTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTask not implemented")
}
func (*UnimplementedMapReduceRPCServiceServer) ListWorkers(context.Context, *ListWorkersRequest) (*ListWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWorkers not implemented")
}
func (*UnimplementedMapReduceRPCServiceServer) Intercom(context.Context, *IntercomRequest) (*IntercomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Intercom not implemented")
}

func RegisterMapReduceRPCServiceServer(s *grpc.Server, srv MapReduceRPCServiceServer) {
	s.RegisterService(&_MapReduceRPCService_serviceDesc, srv)
}

func _MapReduceRPCService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceRPCServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceRPCServiceServer).AddTask(ctx, req.(*AddTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceRPCService_ListWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceRPCServiceServer).ListWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/ListWorkers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceRPCServiceServer).ListWorkers(ctx, req.(*ListWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapReduceRPCService_Intercom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntercomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapReduceRPCServiceServer).Intercom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService/Intercom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapReduceRPCServiceServer).Intercom(ctx, req.(*IntercomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MapReduceRPCService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github_com.amazingchow.photon_dance_mapreduce.MapReduceRPCService",
	HandlerType: (*MapReduceRPCServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddTask",
			Handler:    _MapReduceRPCService_AddTask_Handler,
		},
		{
			MethodName: "ListWorkers",
			Handler:    _MapReduceRPCService_ListWorkers_Handler,
		},
		{
			MethodName: "Intercom",
			Handler:    _MapReduceRPCService_Intercom_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mapreduce.proto",
}
